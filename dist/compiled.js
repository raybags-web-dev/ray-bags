(()=>{var e={878:e=>{e.exports={createEmptyDataWrapper:function(e){var t=$("<i />").attr({class:"fas fa-times",id:"video_closeBTN"}),r='<div class="video-frame">\n                                        <div class="_innerDiv">\n                                            HEADING:<p class="data_para">Under Implimentation</p>\n                                            READ MORE: &emsp;<a class="data_url" href="#" target="_blank">######</a>\n                                            DATE: &emsp;<span class="data_time">'.concat((new Date).toLocaleDateString(),"</span>\n                                        </div> \n                                </div> "),n=$("<div></div>").attr({class:"video-wrapper"}).append($(r),$(t));$("body").prepend($(n)),$($(n).children()[1]).on("click",(function(){return $(n).remove()}))},createNewsDataWrapper:function(e){var t=$("<i />").attr({class:"fas fa-times",id:"video_closeBTN"}),r=$("<div></div>").attr({class:"video-frame"});fetch(e).then((function(e){return e.json()})).then((function(e){var t=e.newsBreaking1.map((function(e){var t=e.title,r=e.url,n=e.createdAt;return'<div class="_innerDiv">\n                                 <span>HEADING: &emsp; <p class="data_para">'.concat(t,'</p></span> \n                                 <span>READ MORE: &emsp; <a class="data_url" href="').concat(r,'" target="_blank">visit website</a></span> \n                                 <p> DATE: &emsp; <span class="data_time">').concat(n,"</span></p> \n                                </div> ")})).join(" ");r.append($(t))}));var n=$("<div></div>").attr({class:"video-wrapper"}).append($(r),$(t));$("body").prepend($(n)),$($(n).children()[1]).on("click",(function(){return $(n).remove()}))}}},547:(e,t,r)=>{"use strict";e=r.nmd(e),r(725),r(321),r(941),r(438),r(61),r(36),r(212),r(374);var n,a=document.getElementById("time"),o=document.getElementById("date"),i=document.getElementById("current-weather-items"),c=document.getElementById("time-zone"),s=Array.from(document.querySelectorAll(".logo__1")),l=document.querySelector(".copyrightYear"),u=document.querySelector("#myBtn"),d=document.querySelector(".nav-logo"),h=document.querySelectorAll(".service"),p=document.querySelectorAll(".project"),f=document.querySelectorAll(".blog-card"),g=document.querySelectorAll(".timeline-item"),v=document.querySelector(".about-info"),m=document.querySelector("#hireMe"),b=document.querySelector(".login-section"),$=(document.querySelector(".login-wrapper"),document.querySelector(".aboutMeBTN")),y=document.querySelector("#about"),w=document.querySelector(".about-img"),k=document.querySelector("#mySkills"),x=document.querySelectorAll(".skill-container"),_=document.querySelector("#skills"),E=document.querySelectorAll(".skill"),S=document.querySelector(".contact");e.export={topBTN:u,navLogo:d},n=(new Date).getFullYear(),l.textContent=n;var L=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],T=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function C(e,t){e&&t&&e.addEventListener("click",(function(){window.scroll({top:2500,left:0,behavior:"smooth"}),window.scrollBy({top:100,left:0,behavior:"smooth"}),t.scrollIntoView({behavior:"smooth"})}))}setInterval((function(){var e=new Date,t=e.getMonth(),r=e.getDate(),n=e.getDay(),i=e.getHours(),c=i>=13?i%12:i,s=e.getMinutes(),l=i>=12?"PM":"AM";a.innerHTML=(c<10?"0"+c:c)+":"+(s<10?"0"+s:s)+" "+'<span id="am-pm">'.concat(l,"</span>"),o.innerHTML=L[n]+", "+r+" "+T[t]}),1e3),navigator.geolocation.getCurrentPosition((function(e){var t=e.coords,r=t.latitude,n=t.longitude;fetch("https://api.openweathermap.org/data/2.5/onecall?lat=".concat(r,"&lon=").concat(n,"&exclude=hourly,minutely&units=metric&appid=").concat("4ccb6af86e070324f47859ab51e50bb9")).then((function(e){return e.json()})).then((function(e){!function(e){if(null!=e.current){var t=e.current,r=t.humidity,n=t.pressure,a=t.sunrise,o=t.sunset,s=t.wind_speed,l=t.temp,u=t.feels_like,d=e.current.weather[0].description;c.innerHTML=e.timezone,i.innerHTML='<div class="weather-item">\n        <div>Humidity</div>\n        <div>'.concat(r,'%</div>\n    </div>\n    <div class="weather-item">\n        <div>Pressure</div>\n        <div>').concat(n,'</div>\n    </div>\n    <div class="weather-item">\n      <div>Temperature</div>\n      <div>').concat(l,'&deg;</div>\n    </div>\n    <div class="weather-item">\n      <div>feels like</div>\n      <div>').concat(u,'&deg;</div>\n    </div>\n    <div class="weather-item">\n      <div>-- </div>\n      <div>').concat(d,'</div>\n    </div>\n    <div class="weather-item">\n        <div>Wind Speed</div>\n        <div>').concat(s,'</div>\n    </div>\n    \n    <div class="weather-item">\n        <div>Sunrise</div>\n        <div>').concat(window.moment(1e3*a).format("HH:mm a"),'</div>\n    </div>\n    <div class="weather-item">\n        <div>Sunset</div>\n        <div>').concat(window.moment(1e3*o).format("HH:mm a"),"</div>\n    </div> ")}}(e)})).catch((function(e){return alert(e.message)}))}));var I=new IntersectionObserver((function(e){e.forEach((function(e){e.target.classList.toggle("show_service_card",e.isIntersecting),e.isIntersecting&&I.unobserve(e.target)}))}),{threshold:.5,rootMargin:"-1px"}),M=new IntersectionObserver((function(e){e.forEach((function(e){e.target.classList.toggle("fadeIn-effect",e.isIntersecting),e.isIntersecting&&I.unobserve(e.target)}))}),{threshold:.5,rootMargin:"-1px"}),D=new IntersectionObserver((function(e){e.forEach((function(e){e.target.classList.toggle("skills_show",e.isIntersecting)}))}),{threshold:.5,rootMargin:"-1px"}),O=new IntersectionObserver((function(e){e.forEach((function(e){e.target.classList.toggle("slide-left-effect",e.isIntersecting),e.isIntersecting&&I.unobserve(e.target)}))}),{threshold:.5,rootMargin:"-1px"});h.forEach((function(e){O.observe(e)})),p.forEach((function(e){M.observe(e)})),E.forEach((function(e){I.observe(e)})),f.forEach((function(e){O.observe(e)})),g.forEach((function(e){O.observe(e)})),x.forEach((function(e){D.observe(e)})),O.observe(v),O.observe(w),C(m,b),C($,y),C(k,_),C(S),s.forEach((function(e){e.addEventListener("click",(function(){document.getElementById("home").scrollIntoView({behavior:"smooth"})}))}))},18:(e,t,r)=>{"use strict";function n(e,t,r,n,a,o,i){try{var c=e[o](i),s=c.value}catch(e){return void r(e)}c.done?t(s):Promise.resolve(s).then(n,a)}function a(e){return function(){var t=this,r=arguments;return new Promise((function(a,o){var i=e.apply(t,r);function c(e){n(i,a,o,c,s,"next",e)}function s(e){n(i,a,o,c,s,"throw",e)}c(void 0)}))}}r(666);var o=r(878),i=o.createEmptyDataWrapper,c=o.createNewsDataWrapper,s=["Cool with REST api-dev","I'm into Data Integration","Okay with Server-side Scripting","Work with Nodejs-Express","Develop ETL and ELT","Okay with Data lakes modeling","Okay with non/relational DBs","Data warehousing","AWS-cloud solutions","Okay with Hadoop distributions","Okay with Spark & Kafka pubs/subs","Work with Kibana & cheossearch","HTML, CSS, Sass","JavaScript/jQuery/ReactJs","With with Python pycharm"];document.addEventListener("DOMContentLoaded",(function(){var e,t,r,n,o,l,u,d,h,p,f;setTimeout((function(){$("#myBtn").removeClass("hide")}),1e3),$(".hero-image-bg").removeClass("hide"),$("img").each((function(e,t){$(t).attr("src",$(t).attr("data-src")),$(t).removeAttr("data-src")})),e=document.getElementById("contact_me_form"),$("#contact_me_form").on("submit",(function(t){t.preventDefault();var r=new FormData(e).get("name");$(".input-group").remove(),$(".login-button").remove(),$(".login-title").text("Hi ".concat(r,"."));var n=$("<p></p>").attr({class:"message-details"}).text("I'll get back to you as soon as possible");$("#contact_me_form").append(n)})),o=["card1","card2","card3","card4","card5","card6","card7","card8","card9","card10","card11","card12"],l=$("<i></i>").attr({class:"fas fa-caret-right"}),u=$("<i></i>").attr({class:"fas fa-caret-left"}),d=$("<div></div>").attr({class:"expand_button"}).append($(l)),h=$("<div></div>").attr({class:"minimize_button"}).append($(u)),p=$("<div></div>").attr({class:"curacel-inner"}),f=$("<div></div>").attr({class:"curacel-wrapper"}).append($(p),$(d),$(h)),$("body").append($(f)),function(){var e=[];$(o).each((function(){var t,r,n,a,o=(t=$("<i /> ").attr({class:"fas fa-play",id:"play-icon"}),r=$("<div />").attr({class:"icon-div"}).append($(t)),n=$("<p></p>").text("Coming Soon"),a=$("<div></div>").attr({class:"card-content-div"}).append($(n),$(r)),$(a));e.push(o)})),$(e).each((function(e,t){$(".curacel-inner").append($(t))}));var t=[];$(".card-content-div").each((function(e,r){$(r).on("click",a(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.abrupt("return",0==$(this).index()?c("https://raybags.herokuapp.com/scrapper/v1/sky-breaking-news"):i());case 4:e.prev=4,e.t0=e.catch(0),console.log(e.t0.message);case 7:case"end":return e.stop()}}),e,this,[[0,4]])})))),t.push($(r)),$($(t[0]).children()[0]).text("Sky news data"),$($(t[1]).children()[0]).text("Amazon data"),$($(t[2]).children()[0]).text("Cheap Hotels data"),$($(t[3]).children()[0]).text("Crypto Data"),$($(t[4]).children()[0]).text("Cheap flights data"),$($(t[5]).children()[0]).text("Movie history data"),$($(t[6]).children()[0]).text("Logical Ops data"),$($(t[7]).children()[0]).text("Trending tech data"),$($(t[8]).children()[0]).text("Fashion data"),$($(t[9]).children()[0]).text("Business data"),$($(t[10]).children()[0]).text("ETL/ELT designs"),$($(t[11]).children()[0]).text("")})),setTimeout((function(){$(".curacel-wrapper").css({width:"40%"})}),4e3)}(),$(".minimize_button").on("click",(function(){$(".curacel-wrapper").css({width:"2%"}),$(".curacel-inner").css({width:"0%"}),$(this).css({display:"none"}),$(".expand_button").css({opacity:1,display:"flex"})})),$(".expand_button").on("click",(function(){$(".curacel-wrapper").css({width:"50%"}),$(this).css({opacity:0,display:"none"}),$(".curacel-inner").css({width:"400%"}),$(".minimize_button").css({opacity:1,display:"flex"})})),$(".close-carosel-container").on("click",(function(){$(".curacel-wrapper").remove()})),$(".night").on("click",(function(){var e=this;$("body").css({"background-image":"linear-gradient(45deg, #762b2b 0%, #000000 100%)"}),$(this).addClass("theme_pulse"),setTimeout((function(){return $(e).removeClass("theme_pulse")}),1e3),$(".hero-social-icon .hero-box-animate").css({"box-shadow":"inset 0px 0px 10px 5px rgba(247, 9, 9, .2)","border-color":"rgba(247, 9, 9, .4)"}),$(".card-content-div").css({"background-image":"linear-gradient(to right, rgba(247, 9, 9, .2) 10%, black 100%)"}),$(".footer_link .fab").each((function(e,t){$(t).css({background:"rgba(247, 9, 9, .3)"})})),$(".timeline-item").each((function(e,t){$(t).css({background:"rgba(247, 9, 9, 0.1)"})})),$("#skills").css({background:"rgba(247, 9, 9, .2)"}),$("#bot-footer").css({background:"rgba(247, 9, 9, .3)"}),$(".hero-image-wrapper").css({background:"rgba(247, 9, 9, .1.5)"}),$(".login-wrapper").css({background:"rgba(247, 9, 9, .3)"}),$(".hero-image-catain").animate({width:"100%",height:"100%"}).css({background:"rgba(247, 9, 9, .1)"}),$(".hero-image-wrapper .pilot-hero-photo").css({filter:"grayscale(10%)"}),$(".s_card").each((function(e,t){$(t).css({background:"rgb(118, 43, 43, 1)"})})),$(".aboutMeBTN").each((function(e,t){$(t).delay(50*e).css({background:"rgba(247, 9, 9, .1)",color:"rgb(250, 248, 248)"})})),$(".about-info").css({background:"rgb(118, 43, 43, .5)"}),$(".intro-about").css({background:"rgb(118, 43, 43, 1)"}),$(".about-img").css({background:"rgba(247, 9, 9, .3)"}),$(".blog-card").each((function(e,t){$(t).css({background:"rgb(118, 43, 43, 1)"})})),$(".full-card").css({background:"rgb(118, 43, 43, .5)"})})),$(".day").on("click",(function(){var e=this;$("body").css({"background-image":"linear-gradient(45deg, #2b3976 0%, #000000 100%)"}),$(this).addClass("theme_pulse"),setTimeout((function(){return $(e).removeClass("theme_pulse")}),1e3),$(".hero-social-icon .hero-box-animate").css({"box-shadow":"inset 0px 0px 10px 5px rgb(22, 84, 126, .2)","border-color":"rgb(22, 84, 126, .8)"}),$(".hero-image-catain").animate({width:"100%",height:"100%"}).css({background:"rgb(22, 84, 126, .1)"}),$(".hero-image-wrapper .pilot-hero-photo").css({filter:"grayscale(10%)"}),$(".card-content-div").css({"background-image":"linear-gradient(to right, rgb(22, 84, 126, .3) 10%, black 100%)"}),$(".footer_link .fab").each((function(e,t){$(t).css({background:"rgb(22, 84, 126, .3)"})})),$("#skills").css({background:"hsl(246, 48%, 8%, .2)"}),$(".hero-image-wrapper").css({background:"rgb(22, 84, 126, .2)"}),$(".timeline-item").each((function(e,t){$(t).css({background:"rgb(22, 84, 126, 0.1)"})})),$("#bot-footer").css({background:"rgb(22, 84, 126, .5)"}),$(".login-wrapper").css({background:"rgb(22, 84, 126, .3)"}),$(".s_card").each((function(e,t){$(t).css({background:"rgb(22, 84, 126, .5)"})})),$(".aboutMeBTN").each((function(e,t){$(t).delay(50*e).css({background:"rgb(22, 84, 126, .3)"})})),$(".about-info").css({background:"rgb(22, 84, 126, .1)"}),$(".intro-about").css({background:"rgb(22, 84, 126, .4)"}),$(".about-img").css({background:"rgb(22, 84, 126, .5)"}),$(".blog-card").each((function(e,t){$(t).css({background:"rgb(22, 84, 126, .4)"})})),$(".full-card").css({background:"rgb(22, 84, 126, .5)"})})),$(".original").on("click",(function(){var e=this;$("body").css({"background-image":"linear-gradient(45deg, #205f25 0%, #000000 100%)"}),$(this).addClass("theme_pulse"),setTimeout((function(){return $(e).removeClass("theme_pulse")}),1e3),$(".hero-social-icon .hero-box-animate").css({"box-shadow":"inset 0px 0px 10px 5px rgb(1, 94, 94, .2)","border-color":"rgb(1, 94, 94, .9)"}),$(".hero-image-catain").animate({width:"100%",height:"100%"}).css({background:"rgb(1, 94, 94, .1)"}),$(".hero-image-wrapper .pilot-hero-photo").css({filter:"grayscale(100%)"}),$(".card-content-div").css({"background-image":"linear-gradient(to right, rgb(1, 94, 94, .3) 10%, black 100%)"}),$(".footer_link .fab").each((function(e,t){$(t).css({background:"rgb(1, 94, 94, .3)"})})),$("#skills").css({background:"rgb(1, 94, 94, .3)"}),$(".hero-image-wrapper").css({background:"rgb(1, 94, 94, .2)"}),$("#bot-footer").css({background:"rgb(1, 94, 94, .6)"}),$(".login-wrapper").css({background:"rgb(1, 94, 94, .3)"}),$(".s_card").each((function(e,t){$(t).css({background:"rgb(1, 94, 94, .5)"})})),$(".timeline-item").each((function(e,t){$(t).css({background:"rgb(1, 94, 94, .2)"})})),$(".aboutMeBTN").each((function(e,t){$(t).delay(50*e).css({background:"rgb(1, 94, 94, .3)"})})),$(".about-info").css({background:"rgb(1, 94, 94, .1)"}),$(".about-img").css({background:"rgb(1, 94, 94, .3)"}),$(".intro-about").css({background:"rgb(1, 94, 94, .4)"}),$(".blog-card").each((function(e,t){$(t).css({background:"rgb(1, 94, 94, .3)"})})),$(".full-card").css({backgroundColor:"rgb(1, 94, 94, .5)"})})),t=$("<a />").attr({class:"cv_button",href:"https://ray-cv.netlify.app",target:"_blank",disabled:"true"}).text("CARRICULUM VITAE"),r=$("<div></div>").attr({class:"sidebars-inner"}).append($(t)),n=$("<div></div>").attr({class:"sidebar-wrapper"}).append($(r)),$("body").append($(n)),$(".app").each((function(e,t){$(t).on("click",(function(){$(".sidebar-wrapper").removeClass("show_sideapp")}))})),setInterval((function(){var e=Math.floor(Math.random()*s.length);$(".skill-desc").text("".concat(s[e])).addClass("bread_crumb").delay(2e3).queue((function(){$(this).removeClass("bread_crumb"),$(this).dequeue()}))}),6e3),$(" .nav-links li").each((function(e,t){$(t).delay(150*e).animate({"margin-top":"0%"})})),$(".skeleton-wrapper").addClass("hide").animate({opacity:0}),$("#nav").slideDown("1000",(function(){$(this).addClass("navbar-fixed").css({top:"-1%",height:"2%"})})),$("#nav-btn").on("click",(function(){$("#sidebar").addClass("show-sidebar"),$(this).slideUp(),$("#close-btn").fadeIn(),$(".sidebar-links").animate({opacity:1}),$(".sidebar-links a").each((function(e,t){$(t).delay(30*e).animate({left:0})}))})),$("#close-btn").on("click",(function(){$("#sidebar").removeClass("show-sidebar"),$(".sidebar-links a").each((function(e,t){$(t).delay(30*e).animate({left:"-100%"})})),$("#nav-btn").slideDown().css({opacity:.5}),$(this).fadeOut()})),$(".hyperMeLink").on("click",(function(e){e.preventDefault(),$("#mySkills").addClass("flash-abtMe"),setTimeout((function(){$("#mySkills").removeClass("flash-abtMe")}),1e3)}));var g=function(){$(".sidebar-links a").each((function(){$(this).on("click",(function(){$("#nav-btn").slideDown(),$("#sidebar").removeClass("show-sidebar")}))}))};$(window).on("scroll",(function(){var e=$(this).scrollTop();$(".achor-link").each((function(){$(this.hash).offset().top-70<=e&&($(this).parent().addClass("active"),$(this).parent().siblings().removeClass("active"))}))})),$(".hero-box-animate").each((function(e,t){$(t).delay(30*e).css({"margin-right":"0rem"})}));var v=function(){$(window).scrollTop()>400?($("#myBtn").css({right:"0%",transition:"800ms"}),$("#bg_image_main").css({"clip-path":"inset(9% 0 7% 0)"}).removeClass("scalein-bg")):($("#myBtn").css({right:"-20%",transition:"800ms"}),$("#bg_image_main").css({"clip-path":"inset(0 0 72% 0)"}).addClass("scalein-bg"))};$(".time_Date").each((function(e,t){$(t).delay(100*e).addClass("dynamically-show")})),$(".achi").css({all:"unset"}).on("click",(function(e){e.preventDefault(),$("#achieve").addClass("flash-abtMe"),setInterval((function(){return $("#achieve").removeClass("flash-abtMe")}),1e3)})),$(document).on("scroll",(function(){g(),v(),$(window).scrollTop()>901?($("#nav_logo_img").css({opacity:"1",left:"0%"}),$(".nav-logo").css({opacity:"0",left:"-500%"})):($("#nav_logo_img").css({opacity:"0",left:"-500%"}),$(".nav-logo").css({opacity:"1",left:"0%"}))})),$(window).on("scroll",(function(){return function(e){if($(window).scrollTop()>=1200){if($(".chat-wrapper").is(":visible"))return;$(".sidebar-wrapper").addClass("show_sideapp")}else $(".sidebar-wrapper").removeClass("show_sideapp")}()})),$(window).on("orientationChange",(function(){g()})),$(window).on("load",(function(){v()}))}))},725:(e,t,r)=>{"use strict";r.r(t)},321:(e,t,r)=>{"use strict";r.r(t)},666:e=>{var t=function(e){"use strict";var t,r=Object.prototype,n=r.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",i=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function s(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,r){return e[t]=r}}function l(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,o=Object.create(a.prototype),i=new T(n||[]);return o._invoke=function(e,t,r){var n=d;return function(a,o){if(n===p)throw new Error("Generator is already running");if(n===f){if("throw"===a)throw o;return I()}for(r.method=a,r.arg=o;;){var i=r.delegate;if(i){var c=E(i,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===d)throw n=f,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var s=u(e,t,r);if("normal"===s.type){if(n=r.done?f:h,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n=f,r.method="throw",r.arg=s.arg)}}}(e,r,i),o}function u(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var d="suspendedStart",h="suspendedYield",p="executing",f="completed",g={};function v(){}function m(){}function b(){}var $={};s($,o,(function(){return this}));var y=Object.getPrototypeOf,w=y&&y(y(C([])));w&&w!==r&&n.call(w,o)&&($=w);var k=b.prototype=v.prototype=Object.create($);function x(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function r(a,o,i,c){var s=u(e[a],e,o);if("throw"!==s.type){var l=s.arg,d=l.value;return d&&"object"==typeof d&&n.call(d,"__await")?t.resolve(d.__await).then((function(e){r("next",e,i,c)}),(function(e){r("throw",e,i,c)})):t.resolve(d).then((function(e){l.value=e,i(l)}),(function(e){return r("throw",e,i,c)}))}c(s.arg)}var a;this._invoke=function(e,n){function o(){return new t((function(t,a){r(e,n,t,a)}))}return a=a?a.then(o,o):o()}}function E(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,E(e,r),"throw"===r.method))return g;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var a=u(n,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,g;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,g):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,g)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function C(e){if(e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var a=-1,i=function r(){for(;++a<e.length;)if(n.call(e,a))return r.value=e[a],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}return{next:I}}function I(){return{value:t,done:!0}}return m.prototype=b,s(k,"constructor",b),s(b,"constructor",m),m.displayName=s(b,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},e.awrap=function(e){return{__await:e}},x(_.prototype),s(_.prototype,i,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,a,o){void 0===o&&(o=Promise);var i=new _(l(t,r,n,a),o);return e.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},x(k),s(k,c,"Generator"),s(k,o,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=C,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(L),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function a(n,a){return c.type="throw",c.arg=e,r.next=n,a&&(r.method="next",r.arg=t),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],c=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var s=n.call(i,"catchLoc"),l=n.call(i,"finallyLoc");if(s&&l){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&n.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),L(r),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var a=n.arg;L(r)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:C(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),g}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},941:(e,t,r)=>{"use strict";e.exports=r.p+"businessCard.png"},438:(e,t,r)=>{"use strict";e.exports=r.p+"meeee.jpg"},61:(e,t,r)=>{"use strict";e.exports=r.p+"need_4_speed.png"},36:(e,t,r)=>{"use strict";e.exports=r.p+"new_logoo2.png"},212:(e,t,r)=>{"use strict";e.exports=r.p+"project_2.jpg"},374:(e,t,r)=>{"use strict";e.exports=r.p+"project_3.jpg"}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var o=t[n]={id:n,loaded:!1,exports:{}};return e[n](o,o.exports,r),o.loaded=!0,o.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),r(547),r(18)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
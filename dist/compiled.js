(()=>{var e={868:(e,t,a)=>{"use strict";a.r(t)},449:(e,t,a)=>{"use strict";a.r(t)},767:(e,t,a)=>{"use strict";a.r(t)},253:(e,t,a)=>{"use strict";a.r(t)},546:(e,t,a)=>{"use strict";a.r(t)},276:(e,t,a)=>{"use strict";a.r(t)},541:(e,t,a)=>{"use strict";a.r(t)},927:(e,t,a)=>{"use strict";a.r(t)},312:(e,t,a)=>{"use strict";a.r(t)},941:(e,t,a)=>{"use strict";e.exports=a.p+"businessCard.png"},438:(e,t,a)=>{"use strict";e.exports=a.p+"meeee.jpg"},61:(e,t,a)=>{"use strict";e.exports=a.p+"need_4_speed.png"},36:(e,t,a)=>{"use strict";e.exports=a.p+"new_logoo2.png"},212:(e,t,a)=>{"use strict";e.exports=a.p+"project_2.jpg"},374:(e,t,a)=>{"use strict";e.exports=a.p+"project_3.jpg"}},t={};function a(n){var r=t[n];if(void 0!==r)return r.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,a),o.exports}a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var t=a.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),(()=>{document.querySelector(".style-switcher-toggler").addEventListener("click",(function(){document.querySelector(".style-switcher").classList.toggle("open")})),Array.from(document.querySelectorAll(".colors span")).forEach((function(e){return e.addEventListener("click",(function(){document.querySelector(".style-switcher").classList.remove("open")}))})),window.addEventListener("scroll",(function(){document.querySelector(".aside").classList.remove("dynamic_sidebar"),document.querySelector(".nav-toggler").classList.remove("menu_effect"),document.querySelector(".style-switcher").classList.contains("open")&&document.querySelector(".style-switcher").classList.remove("open")}));var e,t=document.querySelectorAll(".alternate-style");(e=localStorage.getItem("color"))&&t.forEach((function(t){e===t.getAttribute("title")?t.removeAttribute("disabled"):t.setAttribute("disabled","true")}));var a=document.querySelector(".day-night"),n=document.body.classList;a.addEventListener("click",(function(){if(a.querySelector("i").classList.toggle("fa-sun"),a.querySelector("i").classList.toggle("fa-moon"),n.toggle("dark"),n.contains("dark"))return localStorage.setItem("dark-theme","dark");localStorage.removeItem("dark-theme")})),localStorage.getItem("dark-theme")&&n.toggle("dark"),window.addEventListener("load",(function(){document.body.classList.contains("dark")?a.querySelector("i").classList.add("fa-sun"):a.querySelector("i").classList.add("fa-moon")}))})(),(()=>{"use strict";a(312),a(449),a(767),a(253),a(546),a(276),a(927),a(868),a(541),a(941),a(438),a(61),a(36),a(212),a(374),new Typed(".typing",{strings:["","javaScript-jQuery-reactJs","bash","api dev - Nodejs","etl-elt development","data lake modeling","mongo & mySQL","AWS","Docker","HTML, CSS, Sass","Python-pyCharm"],typeSpeed:110,BackSpeed:60,loop:!0})})(),(()=>{"use strict";var e=document.querySelector(".nav-toggler"),t=document.querySelector(".aside");document.querySelector("#current_date").textContent=(new Date).getFullYear(),e.addEventListener("click",(function(a){e.classList.toggle("menu_effect"),t.classList.toggle("dynamic_sidebar")})),document.body.addEventListener("click",(function(a){var n=e.contains(a.target),r=e.classList.contains("menu_effect"),o=t.classList.contains("dynamic_sidebar");!n&&r&&o&&(e.classList.remove("menu_effect"),t.classList.remove("dynamic_sidebar"))}))})(),(()=>{function e(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return ScrollReveal().reveal(e,t)}e(".btn",{distance:"100%",origin:"bottom",opacity:0,reset:!0,delay:100}),e(".home-img",{distance:"300%",origin:"right",opacity:0,delay:600}),e(".hello",{distance:"100%",origin:"bottom",reset:!0,opacity:0,delay:150}),e(".my-profession",{distance:"100%",origin:"bottom",reset:!0,opacity:0,delay:200}),e(".home-info p",{distance:"100%",origin:"bottom",opacity:0,reset:!0,delay:250}),e(".section-title h2",{distance:"100%",origin:"bottom",reset:!0,opacity:0,delay:150}),e(".about-text h3",{distance:"100%",origin:"bottom",reset:!0,opacity:0,delay:150}),e(".about-text p",{distance:"100%",origin:"bottom",reset:!0,opacity:0,delay:150}),e(".info-item p",{distance:"100%",origin:"bottom",opacity:0,reset:!0,delay:150}),e(".skills-item h5",{distance:"100%",origin:"right",reset:!0,opacity:0,delay:150}),e(".padd-15 h3",{distance:"100%",origin:"bottom",reset:!0,opacity:0,delay:250}),e(".contact-form",{distance:"50%",origin:"bottom",opacity:0,delay:150}),Array.from(document.querySelectorAll(".btn")).forEach((function(t,a){e(t,{distance:"100%",origin:"bottom",reset:!0,opacity:0,delay:10*a})})),Array.from(document.querySelectorAll(".timeline-item h3")).forEach((function(t,a){e(t,{distance:"100%",origin:"left",opacity:0,delay:10*a})})),Array.from(document.querySelectorAll(".timeline-item h4")).forEach((function(t,a){e(t,{distance:"100%",origin:"top",opacity:0,delay:10*a})})),Array.from(document.querySelectorAll(".timeline-item p")).forEach((function(t,a){e(t,{distance:"100%",origin:"top",reset:!0,opacity:0,delay:10*a})})),Array.from(document.querySelectorAll(".circle-dot")).forEach((function(t,a){e(t,{distance:"100%",origin:"top",opacity:0,reset:!0,delay:10*a})})),Array.from(document.querySelectorAll(".timeline-date")).forEach((function(t,a){e(t,{distance:"100%",origin:"top",opacity:0,reset:!0,delay:10*a})})),Array.from(document.querySelectorAll(".portfolio-item")).forEach((function(t,a){e(t,{distance:"120%",origin:"bottom",opacity:0,delay:100*a})})),Array.from(document.querySelectorAll(".contact-info-item")).forEach((function(t,a){e(t,{distance:"100%",origin:"bottom",opacity:0,reset:!0,delay:100*a})})),Array.from(document.querySelectorAll(".progress")).forEach((function(t,a){e(t,{distance:"150%",origin:"right",opacity:0,reset:!0,delay:100*a})})),Array.from(document.querySelectorAll(".vibe-item")).forEach((function(t,a){e(t,{distance:"50%",origin:"bottom",opacity:0,delay:100*a})})),Array.from(document.querySelectorAll(".vibe-item-inner p")).forEach((function(t,a){e(t,{distance:"50%",origin:"bottom",reset:!0,opacity:0,delay:100*a})})),Array.from(document.querySelectorAll(".vibe-item-inner h4")).forEach((function(t,a){e(t,{distance:"50%",origin:"bottom",reset:!0,opacity:0,delay:100*a})})),Array.from(document.querySelectorAll(".service-item")).forEach((function(t,a){e(t,{distance:"100%",origin:"bottom",opacity:0,delay:100*a})})),Array.from(document.querySelectorAll(".service-item-inner h4")).forEach((function(t,a){e(t,{distance:"50%",origin:"bottom",reset:!0,opacity:0,delay:100*a})})),Array.from(document.querySelectorAll(".service-item-inner p")).forEach((function(t,a){e(t,{distance:"50%",origin:"bottom",reset:!0,opacity:0,delay:100*a})})),Array.from(document.querySelectorAll(".row .form-item")).forEach((function(t,a){e(t,{distance:"50%",origin:"bottom",reset:!0,opacity:0,delay:100*a})}))})(),(()=>{"use strict";function e(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function t(e,t,a,n,r,o,i){try{var c=e[o](i),s=c.value}catch(e){return void a(e)}c.done?t(s):Promise.resolve(s).then(n,r)}var a=function(e){$($(e).children()[1]).on("click",(function(){return $(e).remove()})),document.addEventListener("click",(function(t){var a=$(t.target);!a.is("i")&&a.hasClass("video-wrapper")&&$(e).remove()}))},n=function(){var e,n=(e=regeneratorRuntime.mark((function e(t){var n,r,o,i,c,s,d,l,p,u,m,y,f,v,h,g,b,_,S,w,x,A,k,q,E,L;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=$("<div></div>").attr({class:"video-frame"}).append('<div id="spinner-small"> <div class="loader_6">Loading...</div> </div>'),r=$("<i />").attr({class:"fas fa-times",id:"video_closeBTN"}),o=$("<div></div>").attr({class:"video-wrapper"}).append($(n),$(r)),$("body").prepend($(o)),i=function(){return fetch("https://raybags.herokuapp.com/scrapper/v1/user/raysuper@github.com",{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"}}).then((function(e){return e.json()})).then((function(e){return e})).catch((function(e){return console.warn(e.message)}))},e.prev=5,e.next=8,i();case 8:return c=e.sent,s=c.name,d=c.email,l=c.password,p=c.token,u={Accept:"application/json","Content-Type":"application/json;charset=UTF-8"},e.next=16,fetch(t,{method:"POST",headers:u,body:JSON.stringify({name:s,email:d,password:l,token:p})});case 16:return m=e.sent,e.next=19,fetch("https://raybags.herokuapp.com/scrapper/v1/save-travelnews",{method:"POST",headers:u,body:JSON.stringify({name:s,email:d,password:l,token:p})});case 19:return y=e.sent,e.next=22,m.json();case 22:return f=e.sent,e.next=25,y.json();case 25:if(v=e.sent,201!=m.status&&201!=y.status){e.next=50;break}return $("#spinner-small").remove(),e.next=30,v;case 30:return h=e.sent,g=h.travel__a,b=h.travel__b,_=h.travel__c,e.next=36,f;case 36:S=e.sent,w=S.skynews_content,x=S.skynews_content_2,A=w.map((function(e){return'<div class="_innerDiv">\n                        <p><spaspan class="data_time">Breaking news:&emsp;'.concat(e.title||" could not get data ðŸ˜Ÿ  ",'</spaspan></p> \n                        <p><a class="data_url">Url:&emsp;').concat(e.url||" could not get data ðŸ˜Ÿ  ","</a></p> \n                    </div> ")})).join(" "),k=x.map((function(e){return'<div class="_innerDiv">\n                        <p><span class="data_time">Breaking news:&emsp;'.concat(e.caroucel_heading||" could not get data ðŸ˜Ÿ  ",'</span></p> \n                        <p><a class="data_url">Url:&emsp;').concat(e.video_url||" could not get data ðŸ˜Ÿ  ","</a></p> \n                    </div> ")})).join(" "),q=g.map((function(e){return'<div class="_innerDiv">\n                        <p><span class="data_time">Title:&emsp;'.concat(e.title||" could not get data ðŸ˜Ÿ  ",'</span></p> \n                        <p><a class="data_url">Url:&emsp;').concat(e.url||" could not get data ðŸ˜Ÿ  ","</a></p> \n                    </div> ")})).join(" "),E=b.map((function(e){return'<div class="_innerDiv">\n                        <p><a class="data_url">Image url:&emsp;'.concat(e.image_url||" could not get data ðŸ˜Ÿ  ","</a></p> \n                    </div> ")})).join(" "),L=_.map((function(e){return'<div class="_innerDiv">\n                        <p><span class="data_time">Heading:&emsp;'.concat(e.heading||" could not get data ðŸ˜Ÿ  ",'</span></p> \n                        <p><a class="data_url">Video url:&emsp;').concat(e.video_url||" could not get data ðŸ˜Ÿ  ","</a></p> \n                    </div> ")})).join(" "),n.append($(A)),n.append($(k)),n.append($(q)),n.append($(E)),n.append($(L)),a($(o));case 50:e.next=55;break;case 52:e.prev=52,e.t0=e.catch(5),console.log(e.t0.message);case 55:case"end":return e.stop()}}),e,null,[[5,52]])})),function(){var a=this,n=arguments;return new Promise((function(r,o){var i=e.apply(a,n);function c(e){t(i,r,o,c,s,"next",e)}function s(e){t(i,r,o,c,s,"throw",e)}c(void 0)}))});return function(e){return n.apply(this,arguments)}}(),r=function(t){var n=$("<i />").attr({class:"fas fa-times",id:"video_closeBTN"}),r=$("<div></div>").attr({class:"video-frame"}).append('<div id="spinner-small"> <div class="loader_6">Loading...</div> </div>');fetch(t,{headers:{"X-CoinAPI-Key":"3648FCB1-27EC-418C-84B7-A5DFB454D0D7"}}).then((function(e){var t=e.status,a=e.ok;return 200==t&&1==a&&$("#spinner-small").remove(),e.json()})).then((function(t){var a,n=(a=t,function(e){if(Array.isArray(e))return e}(a)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(a)||function(t,a){if(t){if("string"==typeof t)return e(t,a);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?e(t,a):void 0}}(a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).slice(1).map((function(e){var t=e.exchange_id,a=e.website,n=e.name,r=e.data_orderbook_end,o=e.data_orderbook_start,i=e.data_start,c=e.data_end,s=e.volume_1day_usd,d=e.volume_1hrs_usd,l=e.volume_1mth_usd,p=e.data_symbols_count;return'<div class="_innerDiv" draggable="true">\n        <p> Exchange id:&emsp; <span class="data_time">'.concat(t,'</span></p> \n        <p> Name:&emsp; <span class="data_time">').concat(n,'</span></p> \n        <p> Website link:&emsp; <span class="data_time">').concat(a,'</span></p> \n        <p> Orderbook-start:&emsp; <span class="data_time">').concat(o,'</span></p> \n        <p> Orderbook-end:&emsp; <span class="data_time">').concat(r,'</span></p> \n        <p> Start-date:&emsp; <span class="data_time">').concat(i,'</span></p> \n        <p> End-date:&emsp; <span class="data_time">').concat(c,'</span></p> \n        <p> Daily [USD]:&emsp; <span class="data_time">').concat(s,'</span></p> \n        <p> Hourly [USD]:&emsp; <span class="data_time">').concat(d,'</span></p> \n        <p> Monthly: [USD]&emsp; <span class="data_time">').concat(l,'</span></p> \n        <p> Data-symbal count:&emsp; <span class="data_time">').concat(p,"</span></p> \n</div> ")})).join(" ");r.append($(n))}));var o=$("<div></div>").attr({class:"video-wrapper"}).append($(r),$(n));$("body").prepend($(o)),a($(o))};function o(e,t,a,n,r,o,i){try{var c=e[o](i),s=c.value}catch(e){return void a(e)}c.done?t(s):Promise.resolve(s).then(n,r)}function i(e){return function(){var t=this,a=arguments;return new Promise((function(n,r){var i=e.apply(t,a);function c(e){o(i,n,r,c,s,"next",e)}function s(e){o(i,n,r,c,s,"throw",e)}c(void 0)}))}}document.addEventListener("DOMContentLoaded",(function(){function e(){$(window).scrollTop()>400?$("#myBtn").css({right:"0%",transition:"800ms"}):$("#myBtn").css({right:"-20%",transition:"800ms"})}function t(){$(window).scrollTop()>901?($(".nav-image").addClass("slideInNavImg"),$("#nav-logo").addClass("slideInNavText")):($(".nav-image").removeClass("slideInNavImg"),$("#nav-logo").removeClass("slideInNavText"))}var o,c,s,d,l,p,u;$("#spinner-container").addClass("hidden"),e(),t(),o=["card1","card2","card3","card4","card5","card6","card7","card8","card9","card10","card11","card12"],c=$("<i></i>").attr({class:"fas fa-caret-right"}),s=$("<i></i>").attr({class:"fas fa-caret-left"}),d=$("<div></div>").attr({class:"expand_button"}).append($(c)),l=$("<div></div>").attr({class:"minimize_button"}).append($(s)),p=$("<div></div>").attr({class:"curacel-inner"}),u=$("<div></div>").attr({class:"curacel-wrapper"}).append($(p),$(d),$(l)),$("body").append($(u)),function(){var e=[];$(o).each((function(){var t,a,n,r,o=(t=$("<i /> ").attr({class:"fas fa-play",id:"play-icon"}),a=$("<div />").attr({class:"icon-div"}).append($(t)),n=$("<p></p>").text("Coming Soon"),r=$("<div></div>").attr({class:"card-content-div"}).append($(n),$(a)),$(r));e.push(o)})),$(e).each((function(e,t){$(".curacel-inner").append($(t))}));var t=[];$(".card-content-div").each((function(e,o){$(o).on("click",i(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,0!=$(this).index()){e.next=3;break}return e.abrupt("return",n("https://raybags.herokuapp.com/scrapper/v1/savenews"));case 3:if(3!=$(this).index()){e.next=5;break}return e.abrupt("return",r("https://rest.coinapi.io/v1/exchanges"));case 5:return e.abrupt("return",(t=$("<i />").attr({class:"fas fa-times",id:"video_closeBTN"}),o='<div class="video-frame">\n            <div class="_innerDiv" draggable="true">\n                <p class="data_para">Under Implimentation</p>\n                <span class="data_time text-muted">DATE: &emsp;'.concat((new Date).toLocaleDateString(),"</span>\n            </div> \n    </div> "),i=$("<div></div>").attr({class:"video-wrapper"}).append($(o),$(t)),$("body").prepend($(i)),void a($(i))));case 8:e.prev=8,e.t0=e.catch(0),console.log(e.t0.message);case 11:case"end":return e.stop()}var t,o,i}),e,this,[[0,8]])})))),t.push($(o)),$($(t[0]).children()[0]).text("Daily News"),$($(t[1]).children()[0]).text("Retail Data"),$($(t[2]).children()[0]).text("Hotels data"),$($(t[3]).children()[0]).text("Crypto Data"),$($(t[4]).children()[0]).text("Flights data"),$($(t[5]).children()[0]).text("Movies data"),$($(t[6]).children()[0]).text("Stocks Data"),$($(t[7]).children()[0]).text("Tech data"),$($(t[8]).children()[0]).text("Fashion data"),$($(t[9]).children()[0]).text("Business data"),$($(t[10]).children()[0]).text("Travel Data"),$($(t[11]).children()[0]).text("Space Data")})),setTimeout((function(){$(".curacel-wrapper").css({width:"40%"})}),4e3)}(),$(".minimize_button").on("click",(function(){$(".curacel-wrapper").css({width:"2%"}),$(".curacel-inner").css({width:"0%"}),$(this).css({display:"none"}),$(".expand_button").css({opacity:1,display:"flex"})})),$(".expand_button").on("click",(function(){$(".curacel-wrapper").css({width:"50%"}),$(this).css({opacity:0,display:"none"}),$(".curacel-inner").css({width:"400%"}),$(".minimize_button").css({opacity:1,display:"flex"})})),$(".close-carosel-container").on("click",(function(){$(".curacel-wrapper").remove()})),setTimeout((function(){$("#myBtn").removeClass("hide")}),1e3),$(".style-switcher-toggler").on("click",(function(){if(!$(".style-switcher").hasClass("open"))return $(".anch").removeClass("clr-animate");$(".anch").each((function(e,t){$(t).delay(80*e).queue((function(){$(this).addClass("clr-animate").dequeue()}))}))})),$(window).on("scroll",(function(){e(),t()}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,